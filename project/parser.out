Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> assignment
Rule 1     assignment -> VARIABLE EQUAL expression
Rule 2     assignment -> VARIABLE EQUAL flow
Rule 3     flow -> VARIABLE CONNECT flow_functions
Rule 4     flow_functions -> flow_function_call CONNECT flow_functions
Rule 5     flow_functions -> flow_function_call
Rule 6     flow_function_call -> VARIABLE LPAREN params RPAREN
Rule 7     assignment -> expression
Rule 8     expression -> expression PLUS term
Rule 9     expression -> expression MINUS term
Rule 10    expression -> term
Rule 11    expression -> string_def
Rule 12    string_def -> STRING
Rule 13    term -> exponent
Rule 14    term -> term TIMES exponent
Rule 15    term -> term DIV exponent
Rule 16    exponent -> factor
Rule 17    exponent -> factor EXP factor
Rule 18    factor -> NUMBER
Rule 19    factor -> LPAREN expression RPAREN
Rule 20    factor -> VARIABLE
Rule 21    factor -> VARIABLE LPAREN params RPAREN
Rule 22    params -> expression
Rule 23    params -> expression COMMA params
Rule 24    params -> <empty>
Rule 25    conditional -> IF LPAREN condition RPAREN block ELSE block
Rule 26    conditional -> IF LPAREN condition RPAREN block
Rule 27    condition -> expression LT expression
Rule 28    condition -> expression GT expression
Rule 29    condition -> expression LE expression
Rule 30    condition -> expression GE expression
Rule 31    condition -> expression EQ expression
Rule 32    condition -> expression NE expression
Rule 33    block -> { statements }
Rule 34    statements -> statements statement
Rule 35    statements -> statement
Rule 36    statement -> assignment
Rule 37    statement -> conditional

Terminals, with rules where they appear

COMMA                : 23
CONNECT              : 3 4
DIV                  : 15
ELSE                 : 25
EQ                   : 31
EQUAL                : 1 2
EXP                  : 17
GE                   : 30
GT                   : 28
IF                   : 25 26
LE                   : 29
LPAREN               : 6 19 21 25 26
LT                   : 27
MINUS                : 9
NE                   : 32
NUMBER               : 18
PLUS                 : 8
RPAREN               : 6 19 21 25 26
STRING               : 12
TIMES                : 14
VARIABLE             : 1 2 3 6 20 21
error                : 
{                    : 33
}                    : 33

Nonterminals, with rules where they appear

assignment           : 36 0
block                : 25 25 26
condition            : 25 26
conditional          : 37
exponent             : 13 14 15
expression           : 1 7 8 9 19 22 23 27 27 28 28 29 29 30 30 31 31 32 32
factor               : 16 17 17
flow                 : 2
flow_function_call   : 4 5
flow_functions       : 3 4
params               : 6 21 23
statement            : 34 35
statements           : 33 34
string_def           : 11
term                 : 8 9 10 14 15

Parsing method: LALR

state 0

    (0) S' -> . assignment
    (1) assignment -> . VARIABLE EQUAL expression
    (2) assignment -> . VARIABLE EQUAL flow
    (7) assignment -> . expression
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) expression -> . string_def
    (13) term -> . exponent
    (14) term -> . term TIMES exponent
    (15) term -> . term DIV exponent
    (12) string_def -> . STRING
    (16) exponent -> . factor
    (17) exponent -> . factor EXP factor
    (18) factor -> . NUMBER
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . VARIABLE
    (21) factor -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 2
    STRING          shift and go to state 7
    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 10

    assignment                     shift and go to state 1
    expression                     shift and go to state 3
    term                           shift and go to state 4
    string_def                     shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8

state 1

    (0) S' -> assignment .



state 2

    (1) assignment -> VARIABLE . EQUAL expression
    (2) assignment -> VARIABLE . EQUAL flow
    (20) factor -> VARIABLE .
    (21) factor -> VARIABLE . LPAREN params RPAREN

    EQUAL           shift and go to state 11
    EXP             reduce using rule 20 (factor -> VARIABLE .)
    TIMES           reduce using rule 20 (factor -> VARIABLE .)
    DIV             reduce using rule 20 (factor -> VARIABLE .)
    PLUS            reduce using rule 20 (factor -> VARIABLE .)
    MINUS           reduce using rule 20 (factor -> VARIABLE .)
    $end            reduce using rule 20 (factor -> VARIABLE .)
    LPAREN          shift and go to state 12


state 3

    (7) assignment -> expression .
    (8) expression -> expression . PLUS term
    (9) expression -> expression . MINUS term

    $end            reduce using rule 7 (assignment -> expression .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14


state 4

    (10) expression -> term .
    (14) term -> term . TIMES exponent
    (15) term -> term . DIV exponent

    PLUS            reduce using rule 10 (expression -> term .)
    MINUS           reduce using rule 10 (expression -> term .)
    $end            reduce using rule 10 (expression -> term .)
    RPAREN          reduce using rule 10 (expression -> term .)
    COMMA           reduce using rule 10 (expression -> term .)
    TIMES           shift and go to state 15
    DIV             shift and go to state 16


state 5

    (11) expression -> string_def .

    PLUS            reduce using rule 11 (expression -> string_def .)
    MINUS           reduce using rule 11 (expression -> string_def .)
    $end            reduce using rule 11 (expression -> string_def .)
    RPAREN          reduce using rule 11 (expression -> string_def .)
    COMMA           reduce using rule 11 (expression -> string_def .)


state 6

    (13) term -> exponent .

    TIMES           reduce using rule 13 (term -> exponent .)
    DIV             reduce using rule 13 (term -> exponent .)
    PLUS            reduce using rule 13 (term -> exponent .)
    MINUS           reduce using rule 13 (term -> exponent .)
    $end            reduce using rule 13 (term -> exponent .)
    RPAREN          reduce using rule 13 (term -> exponent .)
    COMMA           reduce using rule 13 (term -> exponent .)


state 7

    (12) string_def -> STRING .

    PLUS            reduce using rule 12 (string_def -> STRING .)
    MINUS           reduce using rule 12 (string_def -> STRING .)
    $end            reduce using rule 12 (string_def -> STRING .)
    RPAREN          reduce using rule 12 (string_def -> STRING .)
    COMMA           reduce using rule 12 (string_def -> STRING .)


state 8

    (16) exponent -> factor .
    (17) exponent -> factor . EXP factor

    TIMES           reduce using rule 16 (exponent -> factor .)
    DIV             reduce using rule 16 (exponent -> factor .)
    PLUS            reduce using rule 16 (exponent -> factor .)
    MINUS           reduce using rule 16 (exponent -> factor .)
    $end            reduce using rule 16 (exponent -> factor .)
    RPAREN          reduce using rule 16 (exponent -> factor .)
    COMMA           reduce using rule 16 (exponent -> factor .)
    EXP             shift and go to state 17


state 9

    (18) factor -> NUMBER .

    EXP             reduce using rule 18 (factor -> NUMBER .)
    TIMES           reduce using rule 18 (factor -> NUMBER .)
    DIV             reduce using rule 18 (factor -> NUMBER .)
    PLUS            reduce using rule 18 (factor -> NUMBER .)
    MINUS           reduce using rule 18 (factor -> NUMBER .)
    $end            reduce using rule 18 (factor -> NUMBER .)
    RPAREN          reduce using rule 18 (factor -> NUMBER .)
    COMMA           reduce using rule 18 (factor -> NUMBER .)


state 10

    (19) factor -> LPAREN . expression RPAREN
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) expression -> . string_def
    (13) term -> . exponent
    (14) term -> . term TIMES exponent
    (15) term -> . term DIV exponent
    (12) string_def -> . STRING
    (16) exponent -> . factor
    (17) exponent -> . factor EXP factor
    (18) factor -> . NUMBER
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . VARIABLE
    (21) factor -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 7
    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 10
    VARIABLE        shift and go to state 19

    expression                     shift and go to state 18
    term                           shift and go to state 4
    string_def                     shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8

state 11

    (1) assignment -> VARIABLE EQUAL . expression
    (2) assignment -> VARIABLE EQUAL . flow
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) expression -> . string_def
    (3) flow -> . VARIABLE CONNECT flow_functions
    (13) term -> . exponent
    (14) term -> . term TIMES exponent
    (15) term -> . term DIV exponent
    (12) string_def -> . STRING
    (16) exponent -> . factor
    (17) exponent -> . factor EXP factor
    (18) factor -> . NUMBER
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . VARIABLE
    (21) factor -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 20
    STRING          shift and go to state 7
    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 10

    expression                     shift and go to state 21
    flow                           shift and go to state 22
    term                           shift and go to state 4
    string_def                     shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8

state 12

    (21) factor -> VARIABLE LPAREN . params RPAREN
    (22) params -> . expression
    (23) params -> . expression COMMA params
    (24) params -> .
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) expression -> . string_def
    (13) term -> . exponent
    (14) term -> . term TIMES exponent
    (15) term -> . term DIV exponent
    (12) string_def -> . STRING
    (16) exponent -> . factor
    (17) exponent -> . factor EXP factor
    (18) factor -> . NUMBER
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . VARIABLE
    (21) factor -> . VARIABLE LPAREN params RPAREN

    RPAREN          reduce using rule 24 (params -> .)
    STRING          shift and go to state 7
    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 10
    VARIABLE        shift and go to state 19

    params                         shift and go to state 23
    expression                     shift and go to state 24
    term                           shift and go to state 4
    string_def                     shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8

state 13

    (8) expression -> expression PLUS . term
    (13) term -> . exponent
    (14) term -> . term TIMES exponent
    (15) term -> . term DIV exponent
    (16) exponent -> . factor
    (17) exponent -> . factor EXP factor
    (18) factor -> . NUMBER
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . VARIABLE
    (21) factor -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 10
    VARIABLE        shift and go to state 19

    term                           shift and go to state 25
    exponent                       shift and go to state 6
    factor                         shift and go to state 8

state 14

    (9) expression -> expression MINUS . term
    (13) term -> . exponent
    (14) term -> . term TIMES exponent
    (15) term -> . term DIV exponent
    (16) exponent -> . factor
    (17) exponent -> . factor EXP factor
    (18) factor -> . NUMBER
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . VARIABLE
    (21) factor -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 10
    VARIABLE        shift and go to state 19

    term                           shift and go to state 26
    exponent                       shift and go to state 6
    factor                         shift and go to state 8

state 15

    (14) term -> term TIMES . exponent
    (16) exponent -> . factor
    (17) exponent -> . factor EXP factor
    (18) factor -> . NUMBER
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . VARIABLE
    (21) factor -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 10
    VARIABLE        shift and go to state 19

    exponent                       shift and go to state 27
    factor                         shift and go to state 8

state 16

    (15) term -> term DIV . exponent
    (16) exponent -> . factor
    (17) exponent -> . factor EXP factor
    (18) factor -> . NUMBER
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . VARIABLE
    (21) factor -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 10
    VARIABLE        shift and go to state 19

    exponent                       shift and go to state 28
    factor                         shift and go to state 8

state 17

    (17) exponent -> factor EXP . factor
    (18) factor -> . NUMBER
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . VARIABLE
    (21) factor -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 10
    VARIABLE        shift and go to state 19

    factor                         shift and go to state 29

state 18

    (19) factor -> LPAREN expression . RPAREN
    (8) expression -> expression . PLUS term
    (9) expression -> expression . MINUS term

    RPAREN          shift and go to state 30
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14


state 19

    (20) factor -> VARIABLE .
    (21) factor -> VARIABLE . LPAREN params RPAREN

    EXP             reduce using rule 20 (factor -> VARIABLE .)
    TIMES           reduce using rule 20 (factor -> VARIABLE .)
    DIV             reduce using rule 20 (factor -> VARIABLE .)
    RPAREN          reduce using rule 20 (factor -> VARIABLE .)
    PLUS            reduce using rule 20 (factor -> VARIABLE .)
    MINUS           reduce using rule 20 (factor -> VARIABLE .)
    COMMA           reduce using rule 20 (factor -> VARIABLE .)
    $end            reduce using rule 20 (factor -> VARIABLE .)
    LPAREN          shift and go to state 12


state 20

    (3) flow -> VARIABLE . CONNECT flow_functions
    (20) factor -> VARIABLE .
    (21) factor -> VARIABLE . LPAREN params RPAREN

    CONNECT         shift and go to state 31
    EXP             reduce using rule 20 (factor -> VARIABLE .)
    TIMES           reduce using rule 20 (factor -> VARIABLE .)
    DIV             reduce using rule 20 (factor -> VARIABLE .)
    PLUS            reduce using rule 20 (factor -> VARIABLE .)
    MINUS           reduce using rule 20 (factor -> VARIABLE .)
    $end            reduce using rule 20 (factor -> VARIABLE .)
    LPAREN          shift and go to state 12


state 21

    (1) assignment -> VARIABLE EQUAL expression .
    (8) expression -> expression . PLUS term
    (9) expression -> expression . MINUS term

    $end            reduce using rule 1 (assignment -> VARIABLE EQUAL expression .)
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14


state 22

    (2) assignment -> VARIABLE EQUAL flow .

    $end            reduce using rule 2 (assignment -> VARIABLE EQUAL flow .)


state 23

    (21) factor -> VARIABLE LPAREN params . RPAREN

    RPAREN          shift and go to state 32


state 24

    (22) params -> expression .
    (23) params -> expression . COMMA params
    (8) expression -> expression . PLUS term
    (9) expression -> expression . MINUS term

    RPAREN          reduce using rule 22 (params -> expression .)
    COMMA           shift and go to state 33
    PLUS            shift and go to state 13
    MINUS           shift and go to state 14


state 25

    (8) expression -> expression PLUS term .
    (14) term -> term . TIMES exponent
    (15) term -> term . DIV exponent

    PLUS            reduce using rule 8 (expression -> expression PLUS term .)
    MINUS           reduce using rule 8 (expression -> expression PLUS term .)
    $end            reduce using rule 8 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 8 (expression -> expression PLUS term .)
    COMMA           reduce using rule 8 (expression -> expression PLUS term .)
    TIMES           shift and go to state 15
    DIV             shift and go to state 16


state 26

    (9) expression -> expression MINUS term .
    (14) term -> term . TIMES exponent
    (15) term -> term . DIV exponent

    PLUS            reduce using rule 9 (expression -> expression MINUS term .)
    MINUS           reduce using rule 9 (expression -> expression MINUS term .)
    $end            reduce using rule 9 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 9 (expression -> expression MINUS term .)
    COMMA           reduce using rule 9 (expression -> expression MINUS term .)
    TIMES           shift and go to state 15
    DIV             shift and go to state 16


state 27

    (14) term -> term TIMES exponent .

    TIMES           reduce using rule 14 (term -> term TIMES exponent .)
    DIV             reduce using rule 14 (term -> term TIMES exponent .)
    PLUS            reduce using rule 14 (term -> term TIMES exponent .)
    MINUS           reduce using rule 14 (term -> term TIMES exponent .)
    $end            reduce using rule 14 (term -> term TIMES exponent .)
    RPAREN          reduce using rule 14 (term -> term TIMES exponent .)
    COMMA           reduce using rule 14 (term -> term TIMES exponent .)


state 28

    (15) term -> term DIV exponent .

    TIMES           reduce using rule 15 (term -> term DIV exponent .)
    DIV             reduce using rule 15 (term -> term DIV exponent .)
    PLUS            reduce using rule 15 (term -> term DIV exponent .)
    MINUS           reduce using rule 15 (term -> term DIV exponent .)
    $end            reduce using rule 15 (term -> term DIV exponent .)
    RPAREN          reduce using rule 15 (term -> term DIV exponent .)
    COMMA           reduce using rule 15 (term -> term DIV exponent .)


state 29

    (17) exponent -> factor EXP factor .

    TIMES           reduce using rule 17 (exponent -> factor EXP factor .)
    DIV             reduce using rule 17 (exponent -> factor EXP factor .)
    PLUS            reduce using rule 17 (exponent -> factor EXP factor .)
    MINUS           reduce using rule 17 (exponent -> factor EXP factor .)
    $end            reduce using rule 17 (exponent -> factor EXP factor .)
    RPAREN          reduce using rule 17 (exponent -> factor EXP factor .)
    COMMA           reduce using rule 17 (exponent -> factor EXP factor .)


state 30

    (19) factor -> LPAREN expression RPAREN .

    EXP             reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 19 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 19 (factor -> LPAREN expression RPAREN .)


state 31

    (3) flow -> VARIABLE CONNECT . flow_functions
    (4) flow_functions -> . flow_function_call CONNECT flow_functions
    (5) flow_functions -> . flow_function_call
    (6) flow_function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 34

    flow_functions                 shift and go to state 35
    flow_function_call             shift and go to state 36

state 32

    (21) factor -> VARIABLE LPAREN params RPAREN .

    EXP             reduce using rule 21 (factor -> VARIABLE LPAREN params RPAREN .)
    TIMES           reduce using rule 21 (factor -> VARIABLE LPAREN params RPAREN .)
    DIV             reduce using rule 21 (factor -> VARIABLE LPAREN params RPAREN .)
    PLUS            reduce using rule 21 (factor -> VARIABLE LPAREN params RPAREN .)
    MINUS           reduce using rule 21 (factor -> VARIABLE LPAREN params RPAREN .)
    $end            reduce using rule 21 (factor -> VARIABLE LPAREN params RPAREN .)
    RPAREN          reduce using rule 21 (factor -> VARIABLE LPAREN params RPAREN .)
    COMMA           reduce using rule 21 (factor -> VARIABLE LPAREN params RPAREN .)


state 33

    (23) params -> expression COMMA . params
    (22) params -> . expression
    (23) params -> . expression COMMA params
    (24) params -> .
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) expression -> . string_def
    (13) term -> . exponent
    (14) term -> . term TIMES exponent
    (15) term -> . term DIV exponent
    (12) string_def -> . STRING
    (16) exponent -> . factor
    (17) exponent -> . factor EXP factor
    (18) factor -> . NUMBER
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . VARIABLE
    (21) factor -> . VARIABLE LPAREN params RPAREN

    RPAREN          reduce using rule 24 (params -> .)
    STRING          shift and go to state 7
    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 10
    VARIABLE        shift and go to state 19

    expression                     shift and go to state 24
    params                         shift and go to state 37
    term                           shift and go to state 4
    string_def                     shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8

state 34

    (6) flow_function_call -> VARIABLE . LPAREN params RPAREN

    LPAREN          shift and go to state 38


state 35

    (3) flow -> VARIABLE CONNECT flow_functions .

    $end            reduce using rule 3 (flow -> VARIABLE CONNECT flow_functions .)


state 36

    (4) flow_functions -> flow_function_call . CONNECT flow_functions
    (5) flow_functions -> flow_function_call .

    CONNECT         shift and go to state 39
    $end            reduce using rule 5 (flow_functions -> flow_function_call .)


state 37

    (23) params -> expression COMMA params .

    RPAREN          reduce using rule 23 (params -> expression COMMA params .)


state 38

    (6) flow_function_call -> VARIABLE LPAREN . params RPAREN
    (22) params -> . expression
    (23) params -> . expression COMMA params
    (24) params -> .
    (8) expression -> . expression PLUS term
    (9) expression -> . expression MINUS term
    (10) expression -> . term
    (11) expression -> . string_def
    (13) term -> . exponent
    (14) term -> . term TIMES exponent
    (15) term -> . term DIV exponent
    (12) string_def -> . STRING
    (16) exponent -> . factor
    (17) exponent -> . factor EXP factor
    (18) factor -> . NUMBER
    (19) factor -> . LPAREN expression RPAREN
    (20) factor -> . VARIABLE
    (21) factor -> . VARIABLE LPAREN params RPAREN

    RPAREN          reduce using rule 24 (params -> .)
    STRING          shift and go to state 7
    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 10
    VARIABLE        shift and go to state 19

    params                         shift and go to state 40
    expression                     shift and go to state 24
    term                           shift and go to state 4
    string_def                     shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8

state 39

    (4) flow_functions -> flow_function_call CONNECT . flow_functions
    (4) flow_functions -> . flow_function_call CONNECT flow_functions
    (5) flow_functions -> . flow_function_call
    (6) flow_function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 34

    flow_function_call             shift and go to state 36
    flow_functions                 shift and go to state 41

state 40

    (6) flow_function_call -> VARIABLE LPAREN params . RPAREN

    RPAREN          shift and go to state 42


state 41

    (4) flow_functions -> flow_function_call CONNECT flow_functions .

    $end            reduce using rule 4 (flow_functions -> flow_function_call CONNECT flow_functions .)


state 42

    (6) flow_function_call -> VARIABLE LPAREN params RPAREN .

    CONNECT         reduce using rule 6 (flow_function_call -> VARIABLE LPAREN params RPAREN .)
    $end            reduce using rule 6 (flow_function_call -> VARIABLE LPAREN params RPAREN .)

